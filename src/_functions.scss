/*
 * SPDX-FileCopyrightText: 2021 Cas Dijkman
 *
 * SPDX-License-Identifier: GPL-3.0-only
 */

@use 'sass:math';
@use 'sass:meta';
@use 'sass:list';

@function power($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $_ from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $_ from 1 through - $exponent {
      $value: math.div($value, $number);
    }
  }

  @return $value;
}

@function nth-power-of-two($exponent) {
  @return power(2, $exponent);
}

@function compatible-hardened($number1, $number2) {
  @if not $number1 or not $number2 {
    @return false;
  } @else {
    @return math.compatible($number1, $number2);
  }
}

@function strip-unit($number) {
  @if type-of($number) == 'number' {
    @return math.div($number, ($number * 0 + 1));
  } @else {
    @error 'Wrong parameter, not a number ' + $number;
  }
}

@function em-to-rem($em) {
  @return strip-unit($em) * 1rem;
}

@function number-to-class-name($number) {
  @if meta.type-of($number) != 'number' {
    @error 'Wrong parameter, not an number ' + meta.type-of($number);
  } @else if $number >= 0 {
    @return '#{$number}';
  } @else {
    @return 'n' + $number * -1;
  }
}

@function remove-values-from-list($list, $value) {
  $new-list: ();

  @each $item in $list {
    @if $item != $value {
      $new-list: list.append($new-list, $item);
    }
  }

  @return $new-list;
}

@function list-to-dash-separated-string($list) {
  @if meta.type-of($list) != list and meta.type-of($list) != arglist {
    @error 'Wrong parameter, not a list ' + meta.type-of($list);
  }

  $list: remove-values-from-list($list, '');
  $list: remove-values-from-list($list, null);
  $dash-separated-string: '';

  @each $item in $list {
    @if meta.type-of($item) != string {
      @error 'Unexpected value, not a string ' + $item;
    } @else if list.index($list, $item) == list.length($list) {
      $dash-separated-string: $dash-separated-string + $item;
    } @else {
      $dash-separated-string: $dash-separated-string + $item + '-';
    }
  }

  @return $dash-separated-string;
}

@function construct-class-name($list...) {
  @return '.' + list-to-dash-separated-string($list);
}
