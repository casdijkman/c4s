@use './functions';
@use 'sass:color';
@use 'sass:math';
@use 'sass:map';

/**********
 * Global *
 **********/

$global-prefix: '';

$breakpoints-all: (
  s: ( breakpoint: 20em ),
  m: (breakpoint: 30em),
  l: (breakpoint: 60em),
  h: (breakpoint: 90em),
  p: (media: print)
);

$breakpoints: map.remove($breakpoints-all, 'p');

$modules: (
  /*
   * Non-responsive
   */
  complex: false,
  reset: false,
  color: false,
  hover-color: false,
  background-color: false,
  hover-background-color: false,
  border: false,
  border-width: false,
  border-color: false,
  border-style: false,
  font-family: false,
  font-style: false,
  text-decoration: false,
  text-shadow: false,
  text-transform: false,
  text-align: false,
  opacity: false,
  transform: false,
  transition: false,
  visibility: false,
  box-sizing: false,
  cursor: false,
  miscellaneous: false,
  debug: false,
  /*
   * Responsive
   */
  padding: true,
  margin: true,
  width: true,
  height: true,
  position: true,
  coordinates: true,
  display: true,
  flex: true,
  flex-direction: true,
  float: true,
  border-radius: true,
  font-size: true,
  line-height: true,
  font-weight: true,
  white-space: true,
  vertical-align: true,
  tracking: true,
  measure: true
);

/**********
 * Shared *
 **********/

/*
 * Colors
 */

$black: #000;
$white: #fff;

$colors: (
  /*
   * Black/gray/white
   */
  'black':         $black,
  'near-black':    #111,
  'dark-gray':     #333,
  'mid-gray':      #555,
  'gray':          #777,
  'silver':        #999,
  'light-silver':  #aaa,
  'moon-gray':     #ccc,
  'light-gray':    #eee,
  'near-white':    #f4f4f4,
  'white':         $white,
  /*
   * Red
   */
  'dark-red':      #e7040f,
  'red':           #ff4136,
  'light-red':     #ff725c,
  'washed-red':    #ffdfdf,
  /*
   * Orange/yellow
   */
  'orange':        #ff6300,
  'gold':          #ffb700,
  'yellow':        #ffd700,
  'light-yellow':  #fbf1a9,
  'washed-yellow': #fffceb,
  /*
   * Purple/pink
   */
  'purple':        #5e2ca5,
  'light-purple':  #a463f2,
  'dark-pink':     #d5008f,
  'hot-pink':      #ff41b4,
  'pink':          #ff80cc,
  'light-pink':    #ffa3d7,
  /*
   * Green
   */
  'dark-green':    #137752,
  'green':         #19a974,
  'light-green':   #9eebcf,
  'washed-green':  #e8fdf5,
  /*
   * Blue
   */
  'navy':          #001b44,
  'dark-blue':     #00449e,
  'blue':          #357edd,
  'light-blue':    #96ccff,
  'lightest-blue': #cdecff,
  'washed-blue':   #f6fffe,
  /*
   * Black opacity variations
   */
  'black-90':      color.scale($black, $alpha: -10%),
  'black-80':      color.scale($black, $alpha: -20%),
  'black-70':      color.scale($black, $alpha: -30%),
  'black-60':      color.scale($black, $alpha: -40%),
  'black-50':      color.scale($black, $alpha: -50%),
  'black-40':      color.scale($black, $alpha: -60%),
  'black-30':      color.scale($black, $alpha: -70%),
  'black-20':      color.scale($black, $alpha: -80%),
  'black-10':      color.scale($black, $alpha: -90%),
  'black-05':      color.scale($black, $alpha: -95%),
  'black-025':     color.scale($black, $alpha: -97.5%),
  'black-0125':    color.scale($black, $alpha: -98.75%),
  /*
   * White opacity variations
   */
  'white-90':      color.scale($white, $alpha: -10%),
  'white-80':      color.scale($white, $alpha: -20%),
  'white-70':      color.scale($white, $alpha: -30%),
  'white-60':      color.scale($white, $alpha: -40%),
  'white-50':      color.scale($white, $alpha: -50%),
  'white-40':      color.scale($white, $alpha: -60%),
  'white-30':      color.scale($white, $alpha: -70%),
  'white-20':      color.scale($white, $alpha: -80%),
  'white-10':      color.scale($white, $alpha: -90%),
  'white-05':      color.scale($white, $alpha: -95%),
  'white-025':     color.scale($white, $alpha: -97.5%),
  'white-0125':    color.scale($white, $alpha: -98.75%),
  /*
   * Transparent
   */
  'transparent': transparent
);

/*
 * Spacers
 *
 * There are eight levels of spacers, the first being level 0 with value 0. Levels 1
 * through 7 represent the product of $spacer-base with powers of two. Level 4 and is
 * considered middle size and is the product of $spacer-base and 2^0.
 */

$spacer-base: 2rem;
$spacer-levels: (
  '0': 0,
  '1': $spacer-base * functions.nth-power-of-two(-3),
  '2': $spacer-base * functions.nth-power-of-two(-2),
  '3': $spacer-base * functions.nth-power-of-two(-1),
  '4': $spacer-base,
  '5': $spacer-base * functions.nth-power-of-two(1),
  '6': $spacer-base * functions.nth-power-of-two(2),
  '7': $spacer-base * functions.nth-power-of-two(3)
);

/*
 * Sizers
 *
 * There are six levels of sizers, the first being level 0 with value 0. For levels 1
 * through 6, every next level is twice the size, starting at $sizer-base.
 */

$sizer-base: 1rem;
$sizer-levels: (
  '0':           0,
  '1':           $sizer-base,
  '2':           $sizer-base * functions.nth-power-of-two(1),
  '3':           $sizer-base * functions.nth-power-of-two(2),
  '4':           $sizer-base * functions.nth-power-of-two(3),
  '5':           $sizer-base * functions.nth-power-of-two(4),
  '6':           $sizer-base * functions.nth-power-of-two(5),
  '-10':         10%,
  '-20':         20%,
  '-30':         30%,
  '-third':      math.div(100%, 3),
  '-40':         40%,
  '-50':         50%,
  '-60':         60%,
  '-two-thirds': math.div(200%, 3),
  '-70':         70%,
  '-80':         80%,
  '-90':         90%,
  '-100':        100%
);

/******************
 * Non-responsive *
 ******************/

// Background-color
$background-color-name: bg;

// Border color
$border-color-prefix: b--;

// Border
$-border-style-default: solid;
$-border-width-default: 1px;
$borders: (
  ba: (
    border-direction: null,
    border-style: $-border-style-default,
    border-width: $-border-width-default
  ),
  bt: (
    border-direction: top,
    border-style: $-border-style-default,
    border-width: $-border-width-default
  ),
  br: (
    border-direction: right,
    border-style: $-border-style-default,
    border-width: $-border-width-default
  ),
  bb: (
    border-direction: bottom,
    border-style: $-border-style-default,
    border-width: $-border-width-default
  ),
  bl: (
    border-direction: left,
    border-style: $-border-style-default,
    border-width: $-border-width-default
  ),
  bn: (
    border-direction: null,
    border-style: none,
    border-width: 0
  )
);

// Border styles
$border-style-prefix: b--;
$border-styles: [ solid, dotted, dashed, double, groove, ridge, inset, outset ];

// Border width
$border-width-prefix: bw;
$border-width-base: 1rem;
$border-widths: (
  '1': $border-width-base * functions.nth-power-of-two(-3),
  '2': $border-width-base * functions.nth-power-of-two(-2),
  '3': $border-width-base * functions.nth-power-of-two(-1),
  '4': $border-width-base,
  '5': $border-width-base * functions.nth-power-of-two(1)
);

// Box sizing
$box-sizings: [border-box, content-box];

// Cursor
$cursor-name: cursor;
$cursors: pointer, text, none, not-allowed, progress, wait;

// Font family
$font-families: (
  sans-serif: '-apple-system, BlinkMacSystemFont, "avenir next", avenir, ' +
  '"helvetica neue", helvetica, ubuntu, roboto, noto, "segoe ui", arial, sans-serif',
  serif: 'georgia, times, serif',
  code: 'consolas, monaco, monospace'
);

// Font style
$font-styles: (
  fs-normal: normal,
  fs-italic: italic,
  i: italic
);

// Hover background color
$hover-background-color-name: hover-bg;

// Hover color
$hover-color-name: hover;

// Opacity
$opacity-name: o;
$opacity-levels: (
  '100': 1,
  '90':  .9,
  '80':  .8,
  '70':  .7,
  '60':  .6,
  '50':  .5,
  '40':  .4,
  '30':  .3,
  '20':  .2,
  '10':  .1,
  '05':  .05,
  '025': .025,
  '0':   0
);

// Text align
$text-aligns: (
  tl: left,
  tr: right,
  tc: center,
  tj: justify
);

// Text decoration
$text-decorations: (
  underline: underline,
  line-through: line-through,
  strike: line-through
);

// Text shadow
$text-shadows: (
  text-shadow: .1em .1em .1em map.get($colors, 'black-60')
);

// Text transform
$text-transforms: (
  capitalize: capitalize,
  uppercase: uppercase
);

// Transform
$-translate-levels: (
  '0':    0,
  '100':  100%,
  'n100': -100%,
  '50':   50%,
  'n50':  -50%
);
$transform-translate-horizontal-name: 'translateX';
$transform-translate-horizontal-levels: $-translate-levels;
$transform-translate-vertical-name: 'translateY';
$transform-translate-vertical-levels: $-translate-levels;

// Transition
$transition-name: transition-transform;
$transition-speeds: (
  'slow':   .5s,
  'medium': .25s,
  'fast':   .15s
);

// Visibility
$visibilities: (
  visible:   visible,
  hidden:    hidden,
  invisible: hidden,
  // collapse:  collapse
);

/**************
 * Responsive *
 **************/

// Border radius
$border-radius-prefix: br;
$border-radius-base: 1rem;
$border-radius-levels: (
  '0':     0,
  '1':     $border-radius-base * functions.nth-power-of-two(-3),
  '2':     $border-radius-base * functions.nth-power-of-two(-2),
  '3':     $border-radius-base * functions.nth-power-of-two(-1),
  '4':     $border-radius-base,
  '-100':  100%,
  '-pill': 9999px
);

// Coordinates
$coordinate-spacer-levels: (
  '0':   0,
  '1':   1rem,
  '2':   2rem,
  '50':  50%,
  '100': 100%
);
$coordinate-directions: (
  top:    top,
  right:  right,
  bottom: bottom,
  left:   left
);

// Display
$display-prefix: d;
$displays: (
  b:  block,
  i:  inline,
  ib: inline-block,
  n:  none,
  t:  table,
  tc: table-cell,
  f:  flex,
  if: inline-flex,
  g:  grid
);

// Flex direction
$flex-direction-name: flex;
$flex-directions: (
  column:         column,
  row:            row,
  column-reverse: column-reverse,
  row-reverse:    row-reverse
);

// Flex
$flex-wrap-name: wrap;
$flex-wraps: (
  wrap:         wrap,
  nowrap:       nowrap,
  wrap-reverse: wrap-reverse
);
$flex-align-items-name: items;
$flex-align-items: (
  start:    flex-start,
  end:      flex-end,
  center:   center,
  baseline: baseline,
  stretch:  stretch
);
$flex-align-self-name: self;
$flex-align-selfs: (
  start:    flex-start,
  end:      flex-end,
  center:   center,
  baseline: baseline,
  stretch:  stretch
);
$flex-align-content-name: content;
$flex-align-contents: (
  start:   flex-start,
  end:     flex-end,
  center:  center,
  between: space-between,
  around:  space-around,
  stretch: stretch
);
$flex-justify-content-name: justify;
$flex-justify-contents: (
  start:   flex-start,
  end:     flex-end,
  center:  center,
  between: space-between,
  around:  space-around
);
$flex-grow-name: flex-grow;
$flex-grows: (
  '0': 0,
  '1': 1
);
$flex-shrink-name: flex-shrink;
$flex-shrinks: (
  '0': 0,
  '1': 1
);
$flex-order-name: order;
$flex-orders: (
  // 1:    1,
  // 2:    2,
  // 3:    3,
  // 4:    4,
  // 5:    5,
  // 6:    6,
  // 7:    7,
  // 8:    8,
  // 9:    9,
  // last: 99999
);

// Float
$float-prefix: f;
$floats: (
  l: left,
  r: right,
  n: none
);

// Font size
// Note: The reset module sets the default size for h1-h6 and small based on corresponding values
$font-size-base: 1em;
$font-scaling-factor: 1.25;
$font-sizes: (
  f-headline:    6rem,
  f-subheadline: 5rem,
  f1:            $font-size-base * functions.power($font-scaling-factor, 5),
  f2:            $font-size-base * functions.power($font-scaling-factor, 4),
  f3:            $font-size-base * functions.power($font-scaling-factor, 3),
  f4:            $font-size-base * functions.power($font-scaling-factor, 2),
  f5:            $font-size-base * functions.power($font-scaling-factor, 1),
  f6:            $font-size-base,
  small:         $font-size-base * functions.power($font-scaling-factor, -1)
);

// Font weight
$font-weight-levels: (
  'fw-100':     100,
  'fw-200':     200,
  'fw-300':     300,
  'fw-normal':  400, // font-weight 400 is normal
  'fw-500':     500,
  'fw-600':     600,
  'fw-bold':    700, // font-weight 700 is bold
  'b':          700, // Add extra class for font-weight bold for brevity
  'fw-800':     800,
  'fw-900':     900,
  'fw-lighter': lighter,
  'fw-bolder':  bolder
);

// Height
$height-prefix: h;

// Line height
$line-height-name: lh;
$line-height-levels: (
  'solid':  1,
  'header': 1.15,
  'text':   1.5,
  'extra':  2
);

// Margin
$margin-spacer-levels: map.merge($spacer-levels, ('-auto': auto));
$margins: (
  m:  (
    properties: margin,
    levels: $spacer-levels
  ),
  mt: (
    properties: margin-top,
    levels: $margin-spacer-levels
  ),
  mr: (
    properties: margin-right,
    levels: $margin-spacer-levels
  ),
  mb: (
    properties: margin-bottom,
    levels: $margin-spacer-levels
  ),
  ml: (
    properties: margin-left,
    levels: $margin-spacer-levels
  ),
  mh: (
    properties: [margin-left margin-right],
    levels: $margin-spacer-levels
  ),
  mv: (
    properties: [margin-top margin-bottom],
    levels: $spacer-levels
  )
);

// Measure
$measures: (
  measure-narrow: 20em,
  measure:        30em,
  measure-wide:   34em
);

// Padding
$paddings: (
  p:  (
    properties: padding,
    levels: $spacer-levels
  ),
  pt: (
    properties: padding-top,
    levels: $spacer-levels
  ),
  pr: (
    properties: padding-right,
    levels: $spacer-levels
  ),
  pb: (
    properties: padding-bottom,
    levels: $spacer-levels
  ),
  pl: (
    properties: padding-left,
    levels: $spacer-levels
  ),
  ph: (
    properties: [padding-left padding-right],
    levels: $spacer-levels
  ),
  pv: (
    properties: [padding-top padding-bottom],
    levels: $spacer-levels
  )
);

// Position
$positions: (
  static: static,
  absolute: absolute,
  relative: relative,
  fixed: fixed,
  sticky: sticky
);

// Tracking
// TODO: Rename to letter spacing?
$trackings: (
  tracked:       .1em,
  tracked-tight: -.05em,
  tracked-mega:  .25em
);

// Vertical align
$vertical-align-name: v;
$vertical-aligns: (
  mid:         middle,
  middle:      middle,
  base:        baseline,
  top:         top,
  bottom:      bottom,
  text-top:    text-top,
  text-bottom: text-bottom,
  sub:         sub,
  super:       super
);

// White space
$white-spaces: (
  nowrap: nowrap,
  pre: pre,
  // ws-normal: normal
);

// Width
$width-prefix: w;

/*****************
 * Configuration *
 *****************/

/*
 * The generated configure mixin below is updated with 'update-configure-mixin.sh'
 * Do not manually edit the configure mixin or add any code below the mixin
 */

// Start generated configure mixin code
/* stylelint-disable max-line-length, at-rule-empty-line-before */
@mixin configure($global-prefix: null, $breakpoints-all: null, $breakpoints: null, $modules: null, $black: null, $white: null, $colors: null, $spacer-base: null, $spacer-levels: null, $sizer-base: null, $sizer-levels: null, $background-color-name: null, $border-color-prefix: null, $borders: null, $border-style-prefix: null, $border-styles: null, $border-width-prefix: null, $border-width-base: null, $border-widths: null, $box-sizings: null, $cursor-name: null, $cursors: null, $font-families: null, $font-styles: null, $hover-background-color-name: null, $hover-color-name: null, $opacity-name: null, $opacity-levels: null, $text-aligns: null, $text-decorations: null, $text-shadows: null, $text-transforms: null, $transform-translate-horizontal-name: null, $transform-translate-horizontal-levels: null, $transform-translate-vertical-name: null, $transform-translate-vertical-levels: null, $transition-name: null, $transition-speeds: null, $visibilities: null, $border-radius-prefix: null, $border-radius-base: null, $border-radius-levels: null, $coordinate-spacer-levels: null, $coordinate-directions: null, $display-prefix: null, $displays: null, $flex-direction-name: null, $flex-directions: null, $flex-wrap-name: null, $flex-wraps: null, $flex-align-items-name: null, $flex-align-items: null, $flex-align-self-name: null, $flex-align-selfs: null, $flex-align-content-name: null, $flex-align-contents: null, $flex-justify-content-name: null, $flex-justify-contents: null, $flex-grow-name: null, $flex-grows: null, $flex-shrink-name: null, $flex-shrinks: null, $flex-order-name: null, $flex-orders: null, $float-prefix: null, $floats: null, $font-size-base: null, $font-scaling-factor: null, $font-sizes: null, $font-weight-levels: null, $height-prefix: null, $line-height-name: null, $line-height-levels: null, $margin-spacer-levels: null, $margins: null, $measures: null, $paddings: null, $positions: null, $trackings: null, $vertical-align-name: null, $vertical-aligns: null, $white-spaces: null, $width-prefix: null) { @if $global-prefix != null { $global-prefix: $global-prefix !global; } @if $breakpoints-all != null { $breakpoints-all: $breakpoints-all !global; } @if $breakpoints != null { $breakpoints: $breakpoints !global; } @if $modules != null { $modules: $modules !global; } @if $black != null { $black: $black !global; } @if $white != null { $white: $white !global; } @if $colors != null { $colors: $colors !global; } @if $spacer-base != null { $spacer-base: $spacer-base !global; } @if $spacer-levels != null { $spacer-levels: $spacer-levels !global; } @if $sizer-base != null { $sizer-base: $sizer-base !global; } @if $sizer-levels != null { $sizer-levels: $sizer-levels !global; } @if $background-color-name != null { $background-color-name: $background-color-name !global; } @if $border-color-prefix != null { $border-color-prefix: $border-color-prefix !global; } @if $borders != null { $borders: $borders !global; } @if $border-style-prefix != null { $border-style-prefix: $border-style-prefix !global; } @if $border-styles != null { $border-styles: $border-styles !global; } @if $border-width-prefix != null { $border-width-prefix: $border-width-prefix !global; } @if $border-width-base != null { $border-width-base: $border-width-base !global; } @if $border-widths != null { $border-widths: $border-widths !global; } @if $box-sizings != null { $box-sizings: $box-sizings !global; } @if $cursor-name != null { $cursor-name: $cursor-name !global; } @if $cursors != null { $cursors: $cursors !global; } @if $font-families != null { $font-families: $font-families !global; } @if $font-styles != null { $font-styles: $font-styles !global; } @if $hover-background-color-name != null { $hover-background-color-name: $hover-background-color-name !global; } @if $hover-color-name != null { $hover-color-name: $hover-color-name !global; } @if $opacity-name != null { $opacity-name: $opacity-name !global; } @if $opacity-levels != null { $opacity-levels: $opacity-levels !global; } @if $text-aligns != null { $text-aligns: $text-aligns !global; } @if $text-decorations != null { $text-decorations: $text-decorations !global; } @if $text-shadows != null { $text-shadows: $text-shadows !global; } @if $text-transforms != null { $text-transforms: $text-transforms !global; } @if $transform-translate-horizontal-name != null { $transform-translate-horizontal-name: $transform-translate-horizontal-name !global; } @if $transform-translate-horizontal-levels != null { $transform-translate-horizontal-levels: $transform-translate-horizontal-levels !global; } @if $transform-translate-vertical-name != null { $transform-translate-vertical-name: $transform-translate-vertical-name !global; } @if $transform-translate-vertical-levels != null { $transform-translate-vertical-levels: $transform-translate-vertical-levels !global; } @if $transition-name != null { $transition-name: $transition-name !global; } @if $transition-speeds != null { $transition-speeds: $transition-speeds !global; } @if $visibilities != null { $visibilities: $visibilities !global; } @if $border-radius-prefix != null { $border-radius-prefix: $border-radius-prefix !global; } @if $border-radius-base != null { $border-radius-base: $border-radius-base !global; } @if $border-radius-levels != null { $border-radius-levels: $border-radius-levels !global; } @if $coordinate-spacer-levels != null { $coordinate-spacer-levels: $coordinate-spacer-levels !global; } @if $coordinate-directions != null { $coordinate-directions: $coordinate-directions !global; } @if $display-prefix != null { $display-prefix: $display-prefix !global; } @if $displays != null { $displays: $displays !global; } @if $flex-direction-name != null { $flex-direction-name: $flex-direction-name !global; } @if $flex-directions != null { $flex-directions: $flex-directions !global; } @if $flex-wrap-name != null { $flex-wrap-name: $flex-wrap-name !global; } @if $flex-wraps != null { $flex-wraps: $flex-wraps !global; } @if $flex-align-items-name != null { $flex-align-items-name: $flex-align-items-name !global; } @if $flex-align-items != null { $flex-align-items: $flex-align-items !global; } @if $flex-align-self-name != null { $flex-align-self-name: $flex-align-self-name !global; } @if $flex-align-selfs != null { $flex-align-selfs: $flex-align-selfs !global; } @if $flex-align-content-name != null { $flex-align-content-name: $flex-align-content-name !global; } @if $flex-align-contents != null { $flex-align-contents: $flex-align-contents !global; } @if $flex-justify-content-name != null { $flex-justify-content-name: $flex-justify-content-name !global; } @if $flex-justify-contents != null { $flex-justify-contents: $flex-justify-contents !global; } @if $flex-grow-name != null { $flex-grow-name: $flex-grow-name !global; } @if $flex-grows != null { $flex-grows: $flex-grows !global; } @if $flex-shrink-name != null { $flex-shrink-name: $flex-shrink-name !global; } @if $flex-shrinks != null { $flex-shrinks: $flex-shrinks !global; } @if $flex-order-name != null { $flex-order-name: $flex-order-name !global; } @if $flex-orders != null { $flex-orders: $flex-orders !global; } @if $float-prefix != null { $float-prefix: $float-prefix !global; } @if $floats != null { $floats: $floats !global; } @if $font-size-base != null { $font-size-base: $font-size-base !global; } @if $font-scaling-factor != null { $font-scaling-factor: $font-scaling-factor !global; } @if $font-sizes != null { $font-sizes: $font-sizes !global; } @if $font-weight-levels != null { $font-weight-levels: $font-weight-levels !global; } @if $height-prefix != null { $height-prefix: $height-prefix !global; } @if $line-height-name != null { $line-height-name: $line-height-name !global; } @if $line-height-levels != null { $line-height-levels: $line-height-levels !global; } @if $margin-spacer-levels != null { $margin-spacer-levels: $margin-spacer-levels !global; } @if $margins != null { $margins: $margins !global; } @if $measures != null { $measures: $measures !global; } @if $paddings != null { $paddings: $paddings !global; } @if $positions != null { $positions: $positions !global; } @if $trackings != null { $trackings: $trackings !global; } @if $vertical-align-name != null { $vertical-align-name: $vertical-align-name !global; } @if $vertical-aligns != null { $vertical-aligns: $vertical-aligns !global; } @if $white-spaces != null { $white-spaces: $white-spaces !global; } @if $width-prefix != null { $width-prefix: $width-prefix !global; } }
/* stylelint-enable max-line-length, at-rule-empty-line-before */
